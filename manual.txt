================================
LuaMaker 0.1 - LÃ–VE2D Game development library

.:Only 10kb library size:.
.:Uses snake_case:.
.:Similar to GameMaker:.

Made by neofenixlive
================================

How to use:
    Insert all your assets inside the "game_files" folder,
and sort them into each category (images, sounds or fonts).

    To create a new object/room, open their respective folders
and copy the "_template.lua" file and rename it to whatever you
want, inside the new file just edit the parameters and functions,
use "self." to mention a variable from inside that code.

    Every .lua file inside script folder will be run when the game
starts, so use it to define global variables and custom functions.

--------------------------------

Variables:
x (instance) - x position
y (instance) - y position
hspeed (instance) - horizontal speed
vspeed (instance) - vertical speed
box_width (instance) - hitbox width
box_height (instance) - hitbox height
image (instance) - image file
image_xscale (instance) - image x scaling
image_yscale (instance) - image y scaling
image_angle (instance) - image rotation angle
id (instance) - instance id
object (instance) - instance object

view_x (scene) - camera x position
view_y (scene) - camera y position
view_follow (scene) - camera follow instance
view_width (scene) - screen width
view_height (scene) - screen height
scene_width (scene) - scene width
scene_height (scene) - scene height
scene_background (scene) - scene background image

--------------------------------

Functions:
get_asset(type, name) - returns the asset file

file_make(file) - makes new (or overwrites) file in game directory
file_delete(file) - deletes file on game directory
file_write(variable, value) - writes variable to file
file_read(variable) - reads variable from file

create_instance(object, x, y) - creates instance, returns id
remove_instance(id) - removes instance
get_variable(id, variable) - gets variable from instance
set_variable(id, variable, value) - edits variable from instance

scene_enter(name) - changes current scene
scene_width() - returns scene width
scene_height() - returns scene height
view_x() - returns camera x position
view_y() - returns camera y position
view_follow(id) - sets camera to follow instance

keyboard_check(key) - returns if key is pressed
mouse_x() - returns mouse x position
mouse_y() - returns mouse y position
mouse_button() - returns mouse button (1:left, 2:right, nil:none)

position_meeting(x, y, object) - returns id if theres object at (x, y)
position_free(x, y) - returns if (x, y) has no instances
place_meeting(id, x, y, object) - returns id if instance at (x, y) is colliding with object
place_free(id, x, y) - returns if instance at (x, y) is not colliding
move_towards(id, x, y, speed) - moves instance towards (x, y) by speed units
move_boundaries(id1, id2) - moves instance 1 until it borders with instance 2
point_direction(x1, y1, x2, y2) - returns angle for (x1, y1) to be pointing at (x2, y2)
out_of_bounds(x, y) - returns if (x, y) is outside of scene

draw_set_font(font) - sets text font
draw_set_color(r, g, b, a) - sets draw color
draw_rectangle(x1, y1, x2, y2, mode) - draws rectangle
draw_circle(x, y, r, mode) - draws circle
draw_point(x, y, size) - draws point
draw_line(x1, y1, x2, y2, width) - draws line
draw_text(label, x, y) - draws formatted text
draw_image(image, x, y, rotation, scalex, scaley) - draws transformed image

sound_play(sound) - plays sound, returns id
sound_resume(id) - resumes sound
sound_pause(id) - pauses sound
sound_stop(id) - stops sound
sound_stop_all() - stops all sounds
sound_volume(value) - changes global volume

event_create() - called when instance is created
event_remove() - called when instance is removed
event_step() - called each frame for all instances (update)
event_draw() - called each frame for all instances (render)

creation_code() - called after scene is loaded